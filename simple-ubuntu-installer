#!/bin/bash

# scp ./simple-ubuntu-installer username@remote:/path
set -eo pipefail
trap quit:no_message INT

INSTALL_SCRIPT=install_os.sh
EDITOR=vi

select_disk() {
   select ENTRY in $(ls /dev/disk/by-id/ | grep -v '\-part*');
       do
           DISK="/dev/disk/by-id/$ENTRY"
           break
       done
}

if [ -z "$DISK" ]; then
    select_disk
fi

read -p "Full disk wipe. This might be required to clear ZFS metdata (y/n): " FULLDISKWIPE
read -p "Remote unlock (y/n): " REMOTEUNLOCK
#read -p "Enter hostname: " HOSTNAME
read -p "Enter username: " USERNAME
read -p "Enter ssh port: " SSHPORT
read -p "Install docker (y/n): " INSTALLDOCKER
read -p "Install k0s kubernetes (y/n): " INSTALLK0S
[ -d /sys/firmware/efi ] && IS_EFI=true || IS_EFI=false

write_script() {
	(
        echo "#!/usr/bin/env bash"
        echo "#"
        echo "# Please review the install script below"
        echo "#"
        echo "set -euo pipefail"
        echo
        echo "export DISK=$DISK"
        echo "export BOOTDISK=\"\${DISK}-part1\""
        echo "export ROOTDISK=\"\${DISK}-part2\""
        echo "export IS_EFI=$IS_EFI"
        echo "export FULLDISKWIPE=$FULLDISKWIPE"
        echo "export REMOTEUNLOCK=$REMOTEUNLOCK"
        echo "export USERNAME=$USERNAME"
        echo "export HOSTNAME=$HOSTNAME"
        echo "export SSHPORT=$SSHPORT"
        echo "export SSHPORT=\${SSHPORT:-2222}"
        echo "export INSTALLDOCKER=$INSTALLDOCKER"
        echo "export INSTALLK0S=$INSTALLK0S"
        echo "export NETPLANSETUPFILE=netplansetup.yaml"
        echo "export ARCH=amd64"
        echo "export OSCODENAME=jammy"
        echo "export OSREPO=http://archive.ubuntu.com/ubuntu"
        echo "export OSREPOSECURITY=http://security.ubuntu.com/ubuntu"
        echo "function chroot_exec {"
        echo "  chroot /mnt /usr/bin/env DISK=\$DISK BOOTDISK=\$BOOTDISK ROOTDISK=\$ROOTDISK IS_EFI=\$IS_EFI SSHPORT=\$SSHPORT bash -c \"\$1\""
        echo "}"
        echo
        echo "password1=x"
        echo "password2=y"
        echo "until [[ \$password1 == \$password2 ]]; do"
        echo "  read -s -p \"Enter ZFS disk encryption password (empty to disable encryption): \" password1"
        echo "  echo"
        echo "  read -s -p \"Re-Enter ZFS disk encryption password: \" password2"
        echo "  echo"
        echo "  DISKPASSWORD=\$password1"
        echo "done"
        echo "password1=x"
        echo "password2=y"
        echo "until [[ \$password1 == \$password2 ]]; do"
        echo "  read -s -p \"Enter root password: \" password1"
        echo "  echo"
        echo "  read -s -p \"Re-Enter root password: \" password2"
        echo "  echo"
        echo "  USERPASSWORD=\$password1"
        echo "done"
        echo
        echo "if [[ \"\$DISKPASSWORD\" != \"\" && \"\$REMOTEUNLOCK\" == \"y\" && ! -s ~/.ssh/authorized_keys ]]; then"
        echo "  echo \"~/.ssh/authorized_keys missing\" & exit 1"
        echo "fi"
        echo
        echo "apt update"
        echo "apt install --yes zfsutils-linux"
        echo "swapoff --all"
        echo
        echo "apt-get install --yes pv"
        echo "[ \"\${FULLDISKWIPE}\" = \"y\" ] && pv --timer --rate --stop-at-size -s \"\$(blockdev --getsize64 \$DISK)\" /dev/zero > $DISK"
        echo "sgdisk --zap-all \$DISK # zap anything existing"
        echo "sgdisk -o \$DISK # write a new GPT partition with protective MBR"
        echo
        echo "# Partition 1: 512M. EFI System Partition and Legacy BIOS boot with Legacy BOOT ON"
        echo "sgdisk -n 1:1M:+512M \$DISK   # create partition 1 - first 512M"
        echo "sgdisk -t 1:EF00 \$DISK       # Set partition type to ESP"
        echo "sgdisk -A 1:set:2 \$DISK      # Turn legacy boot attribute on"
        echo "sgdisk -c:1:BOOT \$DISK       # Set partition name to BOOT"
        echo
        echo "# Partition 2: 0:0. ZFS Linux System Partition"
        echo "sgdisk -n 2:0:0 \$DISK        # Partition 2 - everything but the first 512M"
        echo "sgdisk -t 2:BE00 \$DISK       # Set partition type to Linux"
        echo "sgdisk -c:2:ZROOT \$DISK      # Set partition name to ZROOT"
        echo
        echo "partprobe && partx -v \$DISK && udevadm trigger && udevadm settle && sleep 1 && sgdisk --print \$DISK && lsblk # run partx to notify kernel and sleep for partition table to be updated"
        echo "[ ! -f /etc/hostid ] && zgenhostid # generate /etc/hostid"
        echo "sleep 1"
        echo "swapoff -a"
        echo
        echo "# create zfs pool"
        echo "if [[ \"\$DISKPASSWORD\" == \"\" ]]; then"
        echo "  ZFSENCRYPTIONOPTIONS="
        echo "else"
        echo "  ZFSENCRYPTIONOPTIONS=\"-O encryption=aes-256-gcm -O keylocation=prompt -O keyformat=passphrase\""
        echo "fi"
        echo "echo -n \"\$DISKPASSWORD\" | zpool create \$ZFSENCRYPTIONOPTIONS -o ashift=12 -o autotrim=on -O mountpoint=none -O relatime=on -O compression=lz4 -O acltype=posixacl -O xattr=sa zroot \$ROOTDISK"
        echo "zpool set cachefile=/etc/zfs/zpool.cache zroot"
        echo "zfs set com.sun:auto-snapshot=true zroot"
        echo "zfs create -o mountpoint=none                                                             zroot/ROOT"
        echo "zfs create -o mountpoint=/                                                                zroot/ROOT/default"
        echo "zfs create -o mountpoint=none                                                             zroot/data"
        echo "zfs create -o mountpoint=/home                                                            zroot/data/home"
        echo "zfs create -o mountpoint=/root                                                            zroot/data/home/root"
        echo "zfs create -o mountpoint=/home/\$USERNAME                                                 zroot/data/home/\$USERNAME"
        echo "zfs create -o mountpoint=/srv             -o canmount=off                                 zroot/srv"
        echo "zfs create -o mountpoint=/tmp             -o canmount=off -o com.sun:auto-snapshot=false  zroot/tmp"
        echo "zfs create -o mountpoint=/var             -o canmount=off                                 zroot/var"
        echo "zfs create -o mountpoint=/var/games       -o canmount=on                                  zroot/var/games"
        echo "zfs create -o mountpoint=/var/lib         -o canmount=off                                 zroot/var/lib"
        echo "zfs create -o mountpoint=/var/lib/docker  -o canmount=on -o dedup=off                     zroot/var/lib/docker"
        echo "zfs create -o mountpoint=/var/lib/libvirt -o canmount=on                                  zroot/var/lib/libvirt"
        echo "zfs create -o mountpoint=/var/log         -o canmount=off                                 zroot/var/log"
        echo "zfs create -o mountpoint=/var/cache       -o canmount=off -o com.sun:auto-snapshot=false  zroot/var/cache"
        echo "zfs create -o mountpoint=/var/spool       -o canmount=off                                 zroot/var/spool"
        echo "zfs create -o mountpoint=/var/tmp         -o canmount=off -o com.sun:auto-snapshot=false  zroot/var/tmp"
        echo "zfs create -o mountpoint=/var/www         -o canmount=on                                  zroot/var/www"
        echo "zfs create -o mountpoint=/usr             -o canmount=off                                 zroot/usr"
        echo "zfs create -o mountpoint=/usr/local       -o canmount=off                                 zroot/usr/local"
        echo "zpool set bootfs=zroot/ROOT/default zroot"
        echo "zpool export zroot"
        echo "zpool import -R /mnt zroot"
        echo "[[ \"\$DISKPASSWORD\" != \"\" ]] && echo -n \"\$DISKPASSWORD\" | zfs load-key zroot"
        echo "zfs mount -la"
        echo
        echo "# remove default debootstrap and install ubuntu specific one so that we can install hirstue so it works when running under debian rescue system"
        echo "apt remove --yes debootstrap || true"
        echo "rm -rf /tmp/debootstrap"
        echo "mkdir -p /tmp/debootstrap"
        echo "pushd /tmp/debootstrap"
        echo "wget https://mirrors.edge.kernel.org/ubuntu/pool/main/d/debootstrap/debootstrap_1.0.124ubuntu0.2_all.deb"
        echo "ar -x *.deb"
        echo "zcat /tmp/debootstrap/data.tar.gz | tar xv"
        echo "cp -r usr /"
        echo "popd"
        echo "rm -rf /tmp/debootstrap"
        echo
        echo "debootstrap --arch=\$ARCH --include curl,vim,apt-transport-https \$OSCODENAME "/mnt" \"\$OSREPO\""
        echo "cat > /mnt/etc/apt/sources.list <<- EOF"
        echo "deb \$OSREPO \$OSCODENAME main restricted universe multiverse"
        echo "deb \$OSREPO \$OSCODENAME-updates main restricted universe multiverse"
        echo "deb \$OSREPO \$OSCODENAME-backports main restricted universe multiverse"
        echo "deb \$OSREPOSECURITY \$OSCODENAME-security main restricted universe multiverse"
        echo "EOF"
        echo "mount -t proc proc /mnt/proc"
        echo "mount -t sysfs sys /mnt/sys"
        echo "mount -B /dev /mnt/dev"
        echo "mount -t devpts pts /mnt/dev/pts"
        echo
        echo "# Create an VFAT32 filesystem on BOOTDISK"
        echo "apt-get --yes --quiet install dosfstools"
        echo "mkfs.vfat -F 32 \$BOOTDISK"
        echo "if [[ \"\$IS_EFI\" == \"true\" ]]; then"
        echo "  echo \"UUID=\$(blkid -s UUID -o value \$BOOTDISK) /boot/efi vfat defaults 0 0\" >> /mnt/etc/fstab"
        echo "else"
        echo "  echo \"UUID=\$(blkid -s UUID -o value \$BOOTDISK) /boot/syslinux vfat defaults 0 0\" >> /mnt/etc/fstab"
        echo "fi"
        echo
        echo "mkdir /mnt/etc/zfs"
        echo "cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache"
        echo "cp /etc/hostid /mnt/etc/"
        echo "cp /etc/hostname /mnt/etc/"
        echo "cp /etc/resolv.conf /mnt/etc/"
        echo "[ -s ~/.ssh/authorized_keys ] && mkdir -p /mnt/root/.ssh && cp ~/.ssh/authorized_keys /mnt/root/.ssh/authorized_keys"
        echo
        echo "# Basic OS Configuration"
        echo "chroot /mnt /usr/bin/env DISK=\$DISK BOOTDISK=\$BOOTDISK ROOTDISK=\$ROOTDISK IS_EFI=\$IS_EFI SSHPORT=\$SSHPORT bash -x <<-EOF"
        echo "  apt update"
        echo "  ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime && dpkg-reconfigure tzdata -f noninteractive"
        echo "  cat > /etc/default/locale <<-END"
	echo "LANG=\"en_US.UTF-8\""
	echo "LANGUAGE=\"en_US:en\""
        echo "END"
        echo "  cat > /etc/locale.gen <<-END"
	echo "en_US.UTF-8 UTF-8"
        echo "END"
        echo "  dpkg-reconfigure locales -f noninteractive"
        echo "  cat > /etc/default/keyboard <<-END"
	echo "XKBOPTIONS=\"caps:escape\""
        echo "END"
        echo "  dpkg-reconfigure keyboard-configuration -f noninteractive"
        echo
        echo "  # enable ssh"
        echo "  apt-get install --yes openssh-{client,server} net-tools"
        echo "  [ -s ~/.ssh/authorized_keys ] && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config"
        echo "  [ ! -s ~/.ssh/authorized_keys ] && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
        echo "  sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/g' /etc/ssh/sshd_config"
        echo "  sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config"
        echo "  sed -i 's/#Port 22/Port \$SSHPORT/g' /etc/ssh/sshd_config"
        echo "  dpkg-reconfigure openssh-server -f noninteractive"
        echo
        echo "  # Make sure the kernel is installed and configured before ZFS"
        echo "  apt-get --yes --quiet install --no-install-recommends linux-headers-generic linux-image-generic"
        echo "  apt-get --yes --quiet install zfsutils-linux zfs-zed"
        echo "  systemctl enable zfs.target zfs-import-cache zfs-mount zfs-import.target"
        echo
        echo "  apt-get install --yes curl vim"
        echo "  useradd --no-create-home --home /home/\$USERNAME -g users -G sudo --shell /usr/bin/bash \$USERNAME"
        echo "  [ -s /root/.ssh/authorized_keys ] && mkdir -p /home/\$USERNAME/.ssh && cp /root/.ssh/authorized_keys /home/\$USERNAME/.ssh/authorized_keys"
        echo "  chown -R \$USERNAME /home/\$USERNAME"
        echo "  passwd -d \"\$USERNAME\""
        echo
        echo "# Configure Dracut to load ZFS support"
        echo "  apt-get --yes install dracut-core zfs-dracut"
        echo "  cat << END > /etc/dracut.conf.d/100-zol.conf"
        echo "nofsck=\"yes\""
        echo "add_dracutmodules+=\" zfs \""
        echo "omit_dracutmodules+=\" btrfs \""
        echo "END"
        echo
        echo "# Create an fstab entry and mount"
        echo "if [[ \"\$IS_EFI\" == \"true\" ]]; then"
        echo "  mkdir /boot/efi"
        echo "  mount /boot/efi"
        echo "  DEBIAN_FRONTEND=noninteractive apt-get --yes install refind"
        echo "  refind-install"
        echo "  mkdir -p /boot/efi/EFI/ubuntu"
        echo "  cat <<- END > /boot/efi/EFI/ubuntu/refind_linux.conf"
        echo "\"Boot default\" \"zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid ro quiet loglevel=0 zbm.skip\""
        echo "\"Boot to menu\" \"zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid ro quiet loglevel=0 zbm.show\""
        echo "END"
        echo "else"
        echo "  mkdir /boot/syslinux"
        echo "  mount /boot/syslinux"
        echo "  # Install the syslinux package, copy modules"
        echo "  apt-get install --yes syslinux syslinux-common extlinux"
        echo "  cp -r /usr/lib/syslinux/modules/bios/* /boot/syslinux"
        echo "  # Install extlinux"
        echo "  extlinux --install /boot/syslinux"
        echo "  # Install the syslinux GPTMBR data"
        echo "  dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/mbr/gptmbr.bin of=\$DISK"
        echo "fi"
        echo
        echo "  DEBIAN_FRONTEND=noninteractive apt-get --yes install kexec-tools"
        echo
        echo "# Install and configure ZFSBootMenu"
        echo "# Assign command-line arguments to be used when booting the final kernel. Because ZFS properties are inherited, assign the common properties to the ROOT dataset so all children will inherit common arguments by default."
        echo "  zfs set org.zfsbootmenu:commandline=\"rw quiet\" zroot/ROOT"
        echo "  zfs set org.zfsbootmenu:commandline=\"rw quiet\" zroot/ROOT/default"
        echo "  zfs set canmount=noauto zroot/ROOT"
        echo "  zfs set canmount=noauto zroot/ROOT/default"
        echo
        echo "# enable network"
        echo "  cat > /etc/netplan/setup.yaml <<-END"
        echo "network:"
        echo "  version: 2"
        echo "  renderer: networkd"
        echo "  ethernets:"
        echo "    alleths:"
        echo "      match:"
        echo "        name: e*"
        echo "      dhcp4: yes"
        echo "      dhcp6: yes"
        echo "END"
        echo "  netplan generate"
        echo "  systemctl enable systemd-resolved"
        echo "  systemctl enable systemd-networkd"
        echo
        echo "  # Install ufw"
        echo "  apt-get install --yes ufw"
        echo "  ufw default allow outgoing"
        echo "  ufw default deny incoming"
        echo "  ufw allow \$SSHPORT/tcp"
        echo "  ufw allow http"
        echo "  ufw allow https"
        echo "  systemctl enable ufw"
        echo
        echo "  touch /etc/cloud/cloud-init.disabled # disable cloud-init"
        echo
        echo "  # Install the ZFSBootMenu package"
        echo "  apt-get install --yes make"
        echo "  rm -rf /tmp/zfsbootmenu && mkdir -p /tmp/zfsbootmenu"
        echo "  cd /tmp/zfsbootmenu && curl -L https://github.com/zbm-dev/zfsbootmenu/tarball/master | tar xz --strip=1 && make install"
        echo "  # Configure ZFSBootMenu"
        echo "  if [[ \"\$IS_EFI\" == \"true\" ]]; then"
        echo "  cat <<-END > /etc/zfsbootmenu/config.yaml"
        echo "Global:"
        echo "  ManageImages: true"
        echo "  BootMountPoint: /boot/efi"
        echo "  DracutConfDir: /etc/zfsbootmenu/dracut.conf.d"
        echo "Components:"
        echo "  ImageDir: /boot/efi/EFI/ubuntu"
        echo "  Versions: 3"
        echo "  Enabled: true"
        echo "  syslinux:"
        echo "    Config: /boot/syslinux/syslinux.cfg"
        echo "    Enabled: false"
        echo "EFI:"
        echo "  ImageDir: /boot/efi/EFI/ubuntu"
        echo "  Versions: 2"
        echo "  Enabled: false"
        echo "Kernel:"
        echo "  CommandLine: zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid ro quiet loglevel=0"
        echo "END"
        echo "else"
        echo "cat <<-END > /etc/zfsbootmenu/config.yaml"
        echo "Global:"
        echo "  ManageImages: true"
        echo "  BootMountPoint: /boot/syslinux"
        echo "  DracutConfDir: /etc/zfsbootmenu/dracut.conf.d"
        echo "Components:"
        echo "  ImageDir: /boot/syslinux/zfsbootmenu"
        echo "  Versions: 3"
        echo "  Enabled: true"
        echo "  syslinux:"
        echo "    Config: /boot/syslinux/syslinux.cfg"
        echo "    Enabled: true"
        echo "EFI:"
        echo "  ImageDir: /boot/efi/EFI/ubuntu"
        echo "  Versions: 2"
        echo "  Enabled: false"
        echo "Kernel:"
        echo "  CommandLine: zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid ro quiet loglevel=0"
        echo "END"
        echo "fi"
        echo " apt-get --yes install libconfig-inifiles-perl libsort-versions-perl libboolean-perl fzf mbuffer"
        echo " PERL_MM_USE_DEFAULT=1 cpan 'YAML::PP'"
        echo " DEBIAN_FRONTEND=noninteractive apt-get --yes install kexec-tools"
        echo
        echo "if [[ \"\$DISKPASSWORD\" != \"\" && \"\$REMOTEUNLOCK\" == \"y\" ]]; then"
        echo "  apt-get install --yes dracut-network dropbear-bin"
        echo "  rm -rf /tmp/dracut-crypt-ssh && mkdir -p /tmp/dracut-crypt-ssh"
        echo "  cd /tmp/dracut-crypt-ssh && curl -L https://github.com/dracut-crypt-ssh/dracut-crypt-ssh/tarball/master | tar xz --strip=1"
        echo "  sed -i '/inst \\\"\\\$moddir/s/^\\(.*\\)\$/#&/' /tmp/dracut-crypt-ssh/modules/60crypt-ssh/module-setup.sh"
        echo "  cp -ri /tmp/dracut-crypt-ssh/modules/60crypt-ssh /usr/lib/dracut/modules.d"
        echo "  mkdir -p /etc/cmdline.d"
        echo "  echo 'ip=dhcp rd.neednet=1' > /etc/cmdline.d/dracut-network.conf"
        echo "  echo 'add_dracutmodules+=\" crypt-ssh \"' >> /etc/zfsbootmenu/dracut.conf.d/dropbear.conf"
        echo "  echo 'install_items+=\" /etc/cmdline.d/dracut-network.conf \"' >> /etc/zfsbootmenu/dracut.conf.d/dropbear.conf"
        echo "  echo 'install_items+=\" /etc/cmdline.d/dracut-network.conf \"' >> /etc/zfsbootmenu/dracut.conf.d/dropbear.conf"
        echo "  echo \$DISKPASSWORD > /etc/zfs/zroot.key"
        echo "  chmod 000 /etc/zfs/zroot.key"
        echo "  echo 'install_items+=\" /etc/zfs/zroot.key \"' >> /etc/dracut.conf.d/zfskey.conf"
        echo "  zfs change-key -o keylocation=file:///etc/zfs/zroot.key -o keyformat=passphrase zroot"
        echo "  dracut -v -f --regenerate-all"
        echo "fi"
        echo "  generate-zbm --debug"
        echo
        echo "  apt-get install --yes --quiet htop"
        echo
        echo "  if [[ \"\$INSTALLDOCKER\" == \"y\" ]]; then"
        echo "    mkdir -p /etc/docker"
        echo "    echo -e '{\n  \"storage-driver\":\"zfs\"\n}' >> /etc/docker/daemon.json"
        echo "    curl -fsSL https://get.docker.com -o /tmp/get-docker.sh"
        echo "    sh /tmp/get-docker.sh"
        echo "  fi"
        echo
        echo "  if [[ \"\$INSTALLK0S\" == \"y\" ]]; then"
        echo "    curl -sSLf https://get.k0s.sh | sh"
        echo "    mkdir -p /etc/k0s"
        echo "    containerd config default > /etc/k0s/containerd.toml"
        echo "    sed -i 's/snapshotter = \"overlayfs\"/snapshotter = \"zfs\"/g' /etc/k0s/containerd.toml"
        echo "    zfs create -o mountpoint=/var/lib/k0s/containerd/io.containerd.snapshotter.v1.zfs zroot/containerd"
        echo "    k0s config create > /etc/k0s/k0s.yaml"
        echo "    #k0s install controller --single -c /etc/k0s/k0s.yaml"
        echo "    #k0s start"
        echo "    #su \$USERNAME -c \"mkdir -p ~/.kube && sudo k0s kubeconfig admin > ~/.kube/config\""
        echo
        echo "    curl -s https://fluxcd.io/install.sh | bash"
        echo
        echo "    curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        echo "    echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list"
        echo "    apt-get update --yes"
        echo "    apt-get install --yes kubectl"
        echo
        echo "    su \$USERNAME -c \"curl -sS https://webinstall.dev/k9s | bash\""
        echo "    echo -c 'export PATH=\"~/.local/bin:\$PATH\"' >> /home/\$USERNAME/.bash_profile"
        echo "    chown -R \$USERNAME /home/\$USERNAME"
        echo "  fi"
        echo
        echo "  apt-get install --yes --quiet zfs-auto-snapshot"
        echo "  cat > /etc/cron.d/zfs-auto-snapshot <<- END"
        echo "PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin"
        echo "15,30,45 *    *    *     *    zfs-auto-snapshot --syslog --label=frequent --keep=4"
        echo "0        *    *    *     *    zfs-auto-snapshot --syslog --label=hourly   --keep=24"
        echo "7        0    *    *     *    zfs-auto-snapshot --syslog --label=daily    --keep=7"
        echo "14       0    *    *     7    zfs-auto-snapshot --syslog --label=weekly   --keep=4"
        echo "28       0    1    *     *    zfs-auto-snapshot --syslog --label=monthly  --kepp=12"
        echo "END"
        echo
        echo "  echo \"\$USERNAME:\$USERPASSWORD\" | chpasswd"
        echo "  passwd -l root"
        echo "  zfs snapshot -r zroot@install"
        echo "EOF"
        echo
        echo "# unmount everything"
        echo "umount -n /mnt/{dev/pts,dev,sys,proc}"
        echo "if [[ \"\$IS_EFI\" == \"true\" ]]; then"
        echo "  umount /mnt/boot/efi"
        echo "else"
        echo "  umount /mnt/boot/syslinux"
        echo "fi"
        echo "zfs umount -a"
        echo "zpool export zroot"
        echo
        echo "echo \"OS setup complete. Please 'reboot' your machine.\""
    ) > "$INSTALL_SCRIPT"
    chmod +x "$INSTALL_SCRIPT"
}

write_script

# open editor to review and make last changes to the script
"$EDITOR" "$INSTALL_SCRIPT"
reset

clear

read -p "Are you sure you want wipe the disk and install a new OS (YES is capital letter to run): " RUN_INSTALLER
if [ "$RUN_INSTALLER" == "YES" ]; then
    bash "$INSTALL_SCRIPT"
else
    echo "Cancelling installation"
fi
